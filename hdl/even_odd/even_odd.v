// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calculate,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.072000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=161,HLS_VERSION=2018_3}" *)

module even_odd (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s,
        e,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] s;
input  [31:0] e;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] evensum_1_fu_63_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_48_p2;
wire   [31:0] i_1_fu_71_p2;
reg   [31:0] i_reg_28;
reg   [31:0] evensum_reg_37;
wire   [0:0] tmp_1_fu_59_p1;
wire   [0:0] tmp_1_fu_59_p1_temp;
wire   [31:0] evensum_2_fu_53_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_48_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        evensum_reg_37 <= evensum_1_fu_63_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        evensum_reg_37 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_48_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_28 <= i_1_fu_71_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_28 <= s;
    end
end

always @ (*) begin
    if (((tmp_fu_48_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_48_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_48_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = evensum_reg_37;

assign evensum_1_fu_63_p3 = ((tmp_1_fu_59_p1_temp) ? evensum_reg_37 : evensum_2_fu_53_p2);

assign tmp_1_fu_59_p1_temp = tmp_1_fu_59_p1 & 1'd1;

assign evensum_2_fu_53_p2 = (i_reg_28 + evensum_reg_37);

assign i_1_fu_71_p2 = (32'd1 + i_reg_28);

assign tmp_1_fu_59_p1 = i_reg_28 & 1'd1;

assign tmp_fu_48_p2 = (($signed(i_reg_28) > $signed(e)) ? 1'b1 : 1'b0);

endmodule //calculate
